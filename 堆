void Heapify(vector<int> a, int n, int i)
{	//i为parent
	int Lchild = 2 * i + 1;
	int Rchild = 2 * i + 2;
	int max = i;
	//取左右子树比i大的最大值
	//swap(a[Lchild > Rchild ? Lchild : Rchild], a[max]);
	if (Lchild<n && a[Lchild]>a[max])
		max = Lchild;
	if (Rchild<n && a[Rchild]>a[max])
		max = Rchild;
	if (max != i)
		swap(a[i], a[max]);
	Heapify(a, n, max);
	//继续往下层
}

void BuildHeap(vector<int> a,int n)
{
	//建堆
	//为最后一个节点的父节点
	int i = (--(--n)) / 2;
	for (; i >= 0; i--)
	{
		Heapify(a, n, i);
	}
}

void HeapSort(vector<int> a)
{
	int n = a.size();
	BuildHeap(a, n);
	for (int i = --n; i >= 0; i--)
	{
		//每次交换头节点（最大值）和末尾节点（最小值）
		//最大值列到最后后，从堆中排除（结果），重新整理堆
		swap(a[0], a[i]);
		Heapify(a, n, i);
	}
}
